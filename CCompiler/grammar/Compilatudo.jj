/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  STATIC = false;
  OUTPUT_DIRECTORY = "./../src/CCompiler/";
  DEBUG_LOOKAHEAD = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(Compilatudo)
package CCompiler;

import java.io.*;
import java.util.Scanner;
import recovery.*;

public class Compilatudo {
    boolean debug_recovery = true;
    int countParseError = 0;

    public static void main(String[] args) throws ParseException {
        Scanner scan = new Scanner(System.in);
        String nome_arquivo;

        System.out.println("Working Directory = " +
        System.getProperty("user.dir"));

        System.out.println("Entre com o nome do Arquivo ");
        Compilatudo parser = null;

        // nome_arquivo = scan.nextLine();
        nome_arquivo = "entrada.c";

        try {
            parser = new Compilatudo(new java.io.FileInputStream(nome_arquivo));
        } catch(java.io.FileNotFoundException e) {
            System.out.println(e.getMessage());
        }

        try {
            if (parser != null) {
                parser.program();
            }
        }
        catch(ParseEOFException e) {
            System.out.println(e.getMessage());
        } finally {
            if (parser != null) {
                if(parser.token_source.foundLexError() != 0) {
                    System.out.println("Total de erros lexicos: " + parser.token_source.foundLexError());
                } else {
                    System.out.println("Sem erros lexicos!");
                }
                if(parser.countParseError != 0) {
                    System.out.println("Total de erros sintaticos: " + parser.countParseError);
                } else {
                    System.out.println("Sem erros sintaticos!");
                }
            }
        }

        scan.close();
    }

    static public String im(int x) {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\"");

        try {
            s = s.substring(1, k);
        } catch(StringIndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
        }

        return s;
    }

    boolean eof = false;

    void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException {
        Token tok;

        if (debug_recovery) { // informação sobre a recuperação
            System.out.println();
            System.out.println("***" + met + "***");
            System.out.println( " sincronizando conjunto: " + g);
        }
        if (g == null) throw e; // se o conjunto for nulo, propaga a exceção

        tok = getToken(1); // pega o token corrente
        while (!eof) {// se não chegou ao fim do arquivo
            if(g.contains(tok.kind) ) {// achou o token conjunto
                if (debug_recovery)
                    System.out.println ("\tAchou o token de sincronização : " + im(tok.kind));
                break;
            }
            if (debug_recovery)
                System.out.println("  ignorando token : " + im(tok.kind));
            getNextToken();
            tok = getToken(1);
            if (debug_recovery)
                System.out.println("  prox token : " + im(tok.kind));
            if (tok.kind == EOF && g.contains(EOF)) // fim da entrada
                eof = true;
        }
        System.out.println(e.getMessage());
        countParseError++; // incrementa o numero de erros
        if (eof) throw new ParseEOFException("EOF achado prematuramente.");

    }

}

PARSER_END(Compilatudo)

TOKEN_MGR_DECLS:
{
    int countLexError = 0;

    public int foundLexError() {
        return countLexError;
    }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN :
{
  < INT : "int" >
| < IF : "if" >
| < FLOAT: "float" >
| < ELSE: "else" >
| < RETURN: "return" >
| < MAIN: "main" >
| < INCLUDE: "include" >
| < DEFINE: "define" >
| < WHILE: "while" >
| < VOID: "void" >
| < CHAR: "char" >
| < FOR: "for" >
| < DOUBLE: "double" >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < PLUS : "+" >
| < PLUS_EQ : "+=" >
| < MINUS : "-" >
| < MINUS_EQ : "-=" >
| < MULTIPLY : "*" >
| < MULTIPLY_EQ : "*=" >
| < DIVIDE : "/" >
| < DIVIDE_EQ : "/=" >
| < MOD : "%" >
| < MOD_EQ : "%=" >
| < ADRESS: "&" >
| < LEFT_SHIFT: ">>" >
| < RIGHT_SHIFT: "<<" >
| < INC: <PLUS> <PLUS> >
| < DEC: <MINUS> <MINUS> >
}

TOKEN: /*LOGICAL*/
{
  < AND: "&&" >
| < OR: "||" >
}

TOKEN:
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < HASHTAG: "#" >
}

TOKEN :
{
  < int_constant : (< DIGIT >)+ | ((["0"-"7"])+ ["o", "O"]) | (< DIGIT > (["0"-"7", "A"-"F", "a"-"f"])*["h","H"]) | ((["0"-"1"])+ ["b", "B"]) >
| < float_constant: (< DIGIT >)+ <DOT> (<DIGIT >)+ >
| < null_constant: "NULL" >
| < char_constant: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
| < string_constant: "\""( ~["\"", "\r", "\n"])* "\"" >
}

TOKEN:
{
  < ID: < LETTER > (< LETTER >|< DIGIT >)* >
| < #LETTER: ["A"-"Z", "a"-"z", "_", "$"] >
| < #DIGIT: [ "0"-"9" ] >
}

SKIP:
{
	"/*" : multicomentario
}

< multicomentario > SKIP:
{
  "*/": DEFAULT
| < ~[] >
}

SKIP:
{
	"//": unicomentario
}

< unicomentario > SKIP:
{
  < ["\n", "\r"] >: DEFAULT
| < ~[] >
}

SPECIAL_TOKEN:
{
< INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
	"0"-"9",
	"\"",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	";",
	",",
	".",
	"=",
	">",
	"<",
	"!",
	"+",
	"-",
	"/",
	"*",
	"&",
	" ",
	"\t",
	"\r",
	"\n",
	"\f",
	"#"
])+ ((< LETTER >)+ | (< DIGIT >)+) >
	{
	  	System.err.println("Linha: " + input_stream.getEndLine() + " - String Invalida: " + image);
	  	countLexError++;
	}
|
	< INVALID_CONST: "\"" (~ ["\r", "\n", "\""])* ["\r", "\n"] >
	{
	  System.err.println("Linha: " + input_stream.getEndLine() + " - String constante Invalida: " + image);
	  countLexError++;
	}
|
	< INVALID_IDCONST: (< DIGIT >)+(< LETTER >)+>
	{
	  System.err.println("Linha: " + input_stream.getEndLine() + " - Identificador/Constante errado: " + image);
	  countLexError++;
	}
}

void program() throws ParseEOFException :
{
    RecoverySet g = new RecoverySet(EOF);
}
{
    try {
        ( preprocessor(g)
        | LOOKAHEAD(3)func_decl()
        | var_decl() )*
        <EOF>
    } catch(ParseException e) {
        consumeUntil(g, e, "program");
    }
}

void preprocessor(RecoverySet g): {
}
{
    try {
          LOOKAHEAD(3)<HASHTAG> <INCLUDE> "<" <ID>"."<ID> ">"
        | LOOKAHEAD(3)<HASHTAG> <INCLUDE> "\"" <ID>"."<ID> "\""
        | LOOKAHEAD(2)<HASHTAG> <DEFINE> <ID> <ID>
    } catch(ParseException e) {

    }

}


void func_decl(): { }
{
    func_type() (<ID> | <MAIN>) <LPAREN> (parameter_list())? <RPAREN> <LBRACE>
    body()
    (return_val())?
    <RBRACE>
}

void func_type(): { }
{
    <INT> | <DOUBLE> | <CHAR> | <FLOAT> | <VOID>
}

void parameter_list(): { }
{
    var_type() <ID> ("," var_type() <ID>)*
}

void body(): { }
{
	(decl() | comando() | desvio())*
}

void decl(): { }
{
	var_decl()
}

void comando(): { }
{
	expr_value() <SEMICOLON>
}

void desvio(): { }
{
    if_cond()
	| while_cond()
	| for_cond()
}

void var_attr():{}
{
    <ID> <ASSIGN> expr_value()
}

void func_call(): { }
{
	<ID> <LPAREN> expr_list() <RPAREN>
}

void expr_list() : {}
{
    expr_value() ("," expr_value() )*
}

void var_type(): { }
{
  < INT > | < DOUBLE > | < CHAR > | < FLOAT >
}

void while_cond(): { }
{
	< WHILE > < LPAREN > expr_value() < RPAREN > < LBRACE >
	body()
	< RBRACE >
}

void for_cond(): { }
{
	<FOR> <LPAREN> expr_list() <SEMICOLON> expr_list() <SEMICOLON> expr_list() <RPAREN> <LBRACE>
	body()
	<RBRACE>
}

void num_const(): { }
{
  ("+"|"-")? (<int_constant > | < float_constant > | < char_constant >)
}

void expr_value(): { }
{
    (unary_operator())?
    ( num_const()
    | LOOKAHEAD(2)var_attr() | LOOKAHEAD(2)func_call() | <ID>
    | <string_constant>
    | <char_constant>
    | <LPAREN> expr_value() <RPAREN>)
    (LOOKAHEAD(2)unary_operator())?
    (LOOKAHEAD(2)binary_operator() expr_value())?
}

void var_decl(): {}
{
	var_type() (LOOKAHEAD(2)var_attr() | <ID> ) (< COMMA > (LOOKAHEAD(2)var_attr() | <ID> ))* <SEMICOLON>
}

void binary_operator(): {}
{
    <PLUS> | <MINUS> | <MULTIPLY> | <DIVIDE> | <MOD>
    | <PLUS_EQ> | <MINUS_EQ> | <MULTIPLY_EQ> | <DIVIDE_EQ> | <MOD_EQ>
    | <LEFT_SHIFT> | <RIGHT_SHIFT>
    | < GT> | < LT> | < EQ> | < LE> | < GE > | < NE >
    | <AND> | <OR>
}

void if_cond(): {}
{
	<IF> <LPAREN> expr_value() <RPAREN> <LBRACE>
	body()
	< RBRACE >
}

void return_val(): { }
{
    <RETURN> (expr_value())? <SEMICOLON>
}

void unary_operator(): { }
{
	<INC> | <DEC>
}

/*void func(): { }
{
	(

}*/