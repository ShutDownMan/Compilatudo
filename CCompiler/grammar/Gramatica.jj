/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  STATIC = false;
  OUTPUT_DIRECTORY = "./../src/CCompiler/";
  DEBUG_LOOKAHEAD = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(Gramatica)
package CCompiler;

import java.util.Scanner;

public class Gramatica
{
  int contParseError = 0;

  public static void main(String args []) throws ParseException
  {
    Scanner scan = new Scanner(System.in);
    String nome_arquivo;

    System.out.println("Working Directory = " +
    System.getProperty("user.dir"));

    System.out.println("Entre com o nome do Arquivo ");
    Gramatica parser = null;

    // nome_arquivo = scan.nextLine();
    nome_arquivo = "entrada.c";

	try {
		parser = new Gramatica(new java.io.FileInputStream(nome_arquivo));
	}catch(java.io.FileNotFoundException e) {
	  System.out.println(e);
	}

	/*Token aux = null;
	aux = parser.getNextToken();

    while (aux.kind != EOF)
   	{
   	  System.out.println(aux + ": " + im(aux.kind));
   	  aux = parser.getNextToken();
   	}*/

   	try {
   	  parser.program();
   	}
   	catch(ParseException e) {
		System.err.println(e.getMessage());
		parser.contParseError = 1;
   	} finally {
	   	if(parser.token_source.foundLexError() != 0) {
	   	  System.out.println("Total de erros lexicos: " + parser.token_source.foundLexError());
	   	}else {
	   	  System.out.println("Sem erros lexicos!");
	   	}
    }

   	scan.close();
  }

  static public String im(int x)
  {
	int k;
	String s;
	s = tokenImage[x];
	k = s.lastIndexOf("\"");

	try { s = s.substring(1,k); }
	catch(StringIndexOutOfBoundsException e) { }

	return s;
  }
}

PARSER_END(Gramatica)

TOKEN_MGR_DECLS:
{
 int countLexError = 0;

 public int foundLexError()
 {
	return countLexError;
 }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN :
{
  < INT : "int" >
| < IF : "if" >
| < FLOAT: "float" >
| < ELSE: "else" >
| < RETURN: "return" >
| < MAIN: "main" >
| < WHILE: "while" >
| < VOID: "void" >
| < CHAR: "char" >
| < FOR: "for" >
| < DOUBLE: "double" >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MOD : "%" >
| < ADRESS: "&" >
| < LEFT_SHIFT: ">>" >
| < RIGHT_SHIFT: "<<" >
}

TOKEN: /*LOGICAL*/
{
  < AND: "&&" >
| < OR: "||" >
}

TOKEN:
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < HASHTAG: "#" >
}

TOKEN :
{
  < int_constant : (< DIGIT >)+ | ((["0"-"7"])+ ["o", "O"]) | (< DIGIT > (["0"-"7", "A"-"F", "a"-"f"])*["h","H"]) | ((["0"-"1"])+ ["b", "B"]) >
| < float_constant: (< DIGIT >)+ "." (<DIGIT >)+ >
| < null_constant: "NULL" >
| < char_constant: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
| < string_constant: "\""( ~["\"", "\r", "\n"])* "\"" >
}

TOKEN:
{
  < ID: < LETTER > (< LETTER >|< DIGIT >)* >
| < #LETTER: ["A"-"Z", "a"-"z", "_", "$"] >
| < #DIGIT: [ "0"-"9" ] >
}

SKIP:
{
	"/*" : multicomentario
}

< multicomentario > SKIP:
{
  "*/": DEFAULT
| < ~[] >
}

SKIP:
{
	"//": unicomentario
}

< unicomentario > SKIP:
{
  < ["\n", "\r"] >: DEFAULT
| < ~[] >
}

SPECIAL_TOKEN:
{
< INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
	"0"-"9",
	"\"",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	";",
	",",
	".",
	"=",
	">",
	"<",
	"!",
	"+",
	"-",
	"/",
	"*",
	"&",
	" ",
	"\t",
	"\r",
	"\n",
	"\f"
])+ ((< LETTER >)+ | (< DIGIT >)+) >
	{
	  	System.err.println("Linha: " + input_stream.getEndLine() + " - String Invalida: " + image);
	  	countLexError++;
	}
|
	< INVALID_CONST: "\"" (~ ["\r", "\n", "\""])* ["\r", "\n"] >
	{
	  System.err.println("Linha: " + input_stream.getEndLine() + " - String constante Invalida: " + image);
	  countLexError++;
	}
|
	< INVALID_IDCONST: (< DIGIT >)+(< LETTER >)+>
	{
	  System.err.println("Linha: " + input_stream.getEndLine() + " - Identificador/Constante errado: " + image);
	  countLexError++;
	}
}

void program(): { }
{
    ( LOOKAHEAD(3)var_decl()
    | LOOKAHEAD(3)func_decl())*
}

void func_decl(): { }
{
  func_type() (<ID> | <MAIN>) <LPAREN> (parameter_list())? <RPAREN> <LBRACE>
  body()
  (return_val())?
  <RBRACE>
}

void func_type(): { }
{
    <INT> | <DOUBLE> | <CHAR> | <FLOAT> | <VOID>
}

void parameter_list(): { }
{
    var_type() <ID> ("," parameter_list())?
}

void body(): { }
{
	(decl() | comando() | desvio())*
}

void decl(): { }
{
	var_decl()
}

void comando(): { }
{
	LOOKAHEAD(2)func_call() <SEMICOLON>
	| var_attr() <SEMICOLON>
}

void desvio(): { }
{
    ifcond()
	| whilecond()
}

void var_attr():{}
{
    <ID> <ASSIGN> expr_value()
}

void func_call(): { }
{
	<ID> <LPAREN> arg_list() <RPAREN>
}

void arg_list() : {}
{
    expr_value() ("," expr_value() )*
}

void var_type(): { }
{
  < INT > | < DOUBLE > | < CHAR > | < FLOAT >
}

void whilecond(): { }
{
	< WHILE > < LPAREN > comp_expression() < RPAREN > < LBRACE >
	body()
	< RBRACE >
}

void comp_expression(): {}
{
	expr_value() (comparador() expr_value())?
	(combinational() comp_expression())?
}

void comparador(): { }
{
	< GT> | < LT> | < EQ> | < LE> | < GE > | < NE >
}

void combinational(): { }
{
	<AND> | <OR>
}

void num_const(): { }
{
  ("+"|"-")? (<int_constant > | < float_constant > | < char_constant >)
}

void expr_value(): { }
{
    ( num_const()
    | LOOKAHEAD(2)var_attr() | LOOKAHEAD(2)func_call() | <ID>
    | <LPAREN> expr_value() <RPAREN>
    )
    (LOOKAHEAD(2)num_operator() expr_value())?
}

void var_decl(): {}
{
	var_type() (var_attr())? (< COMMA > var_attr())* <SEMICOLON>
}

void num_operator(): {}
{
    <PLUS> | <MINUS> | <MULTIPLY> | <DIVIDE> | <MOD>
    | <LEFT_SHIFT> | <RIGHT_SHIFT>

}

void ifcond(): {}
{
	<IF> <LPAREN> comp_expression() <RPAREN> <LBRACE>
	body()
	< RBRACE >
}

void return_val(): { }
{
    <RETURN> (expr_value())? <SEMICOLON>
}

/*void func(): { }
{
	(

}*/