/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = true;
}

PARSER_BEGIN(Gramatica)
package Analisador;
import java.io.*;
public class Gramatica
{
  public static void main(String args []) throws ParseException
  {
    Scanner scan = new Scanner(System.in);
    String nome_arquivo;
    System.out.println("Entre com o nome do Arquivo ");
    Gramatica parser = null;
	nome_arquivo = scan.nextLine();

	try {
		parser = new Gramatica(new java.io.FileInputStream(nome_arquivo));
	}catch(java.io.FileNotFoundException e) {
	  System.out.println(e);
	}

	Token aux = null;
	aux = parser.getNextToken();
	
    while (aux.kind != EOF)
   	{
   	  System.out.println(aux + ": " + im(aux.kind));
   	  aux = parser.getNextToken();
   	}

   	System.out.println("Total de erros: " + parser.token_source.foundLexError());
  }

  static public String im(int x)
  {
	int k;
	String s;
	s = tokenImage[x];
	k = s.lastIndexOf("\"");

	try { s = s.substring(1,k); }
	catch(StringIndexOutOfBoundsException e)
	{
	}

	return s;
  }
}

PARSER_END(Gramatica)

TOKEN_MGR_DECLS:
{
 int countLexError = 0;

 public int foundLexError()
 {
	return countLexError;
 }
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < INT : "int" >
| < IF : "if" >
| < FLOAT: "float" >
| < ELSE: "else" >
| < RETURN: "return" >
| < MAIN: "main" >
| < WHILE: "while" >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN:
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN :
{
  < int_constant : (< DIGIT >)+>
| < null_constant: "NULL" >
}

TOKEN:
{
  < IDENT: ("_" | < LETTER >) (< LETTER >|< DIGIT >)* >
| < #LETTER: ["A"-"Z", "a"-"z"] >
| < #DIGIT: [ "0"-"9" ] >
}

SPECIAL_TOKEN:
{
< INVALID_LEXICAL:
(~ ["a"-"z", "A"-"Z",
	"0"-"9",
	"\"",
	"(",
	")",
	"[",
	"]",
	"{",
	"}",
	";",
	",",
	".",
	"=",
	">",
	"<",
	"!",
	"+",
	"-",
	"/",
	"*",
	" ",
	"\t",
	"\r",
	"\n"
])+ >
	{
	  	System.out.println("Line: " + input_stream.getEndLine() + " - Invalid string found: " + image);
	  	countLexError++;
	}
}

int one_line() :
{}
{
  sum() ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < int_constant >
| "(" sum() ")"
}
